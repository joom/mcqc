module CIR.File where
import Classes.Pretty()
import GHC.Generics
import CIR.Decl
import Data.Aeson
import Data.Text (Text)
import Prettyprinter
import qualified Data.Text as T
import qualified Data.List as L

data CFile = CFile { _includes :: [Text], _decl :: CDecl }
    deriving (Show, Eq, Generic, ToJSON)

instance Pretty CFile where
  pretty CFile { .. } =
           "// Autogenerated by MCQC"
           <> line <> "#pragma once"
           <> line <> (vcat . map (\p -> "#include \"" <> pretty p <> ".hpp\"") $ _includes)
           <> line
           <> line <> (vcat . map (\p -> "using namespace" <+> pretty (T.toTitle p) <> ";") $ _includes)
           <> line
           <> line <> pretty _decl

instance Semigroup CFile where
    a <> b = CFile (L.sort . L.nub $ _includes a ++ _includes b) $ _decl a <> _decl b

instance Monoid CFile where
    mempty = CFile [] mempty
    mappend = (<>)

